This is a simple skeleton board configuration that can be copied as a
template for creating new board definitions.

Read the comments in setup.sh for more information about how board
definitions work; the following comments provide some additional
details about particular components you might need to use.

================================================================

About U-Boot
--------------------------------

A lot of boards use U-Boot to boot FreeBSD.  U-Boot is a widely-used
Linux boot loader that has support for very many different boards and
is being actively maintained.

There are many forks of U-Boot created by different groups of people
to support different boards.  Generally, the master U-Boot project at
denx.de has been good about adding new board support to the master
sources as such support stabilizes, but for newer boards you may
need to start from U-Boot sources provided by the board vendor.

With FreeBSD/ARM, U-Boot is often paired with ubldr.  ubldr is part of
the FreeBSD source tree; it is a variant of FreeBSD's loader(8)
program that knows how to use U-Boot to access hardware.  In essence,
this creates a convenient separation of responsibilities:
 * U-Boot knows about the hardware.
 * ubldr knows about the FreeBSD kernel.

Generally, the standard U-Boot configuration for a board needs to be
lightly patched to fully support FreeBSD and ubldr:

1. FreeBSD build patches.

There are a couple of patches generally needed just so U-Boot can be
built on FreeBSD.  These address the following issues:
 * cc -print-file-name=include is broken on some versions of FreeBSD
   U-Boot uses this to determine the directory containing "freestanding
   include files".   Because this is broken, U-Boot's top-level config.mk
   must be patched to set gccincdir to /usr/include.
 * On FreeBSD/ARM, some key compiler support functions are only
   available in libc.  In U-Boot's top-level Makefile, add "-lc" to
   the end of PLATFORM_LIBS.

Versions of these patches are already in the 'files' directory of this
sample project; they may need slight adjustment for the version of
U-Boot you're building against.

2. Enable API and ELF loading.

ubldr uses the "U-Boot API" to call into U-Boot for
hardware interaction.  This requires adding code similar
to the following to the appropriate board configuration
in _uboot_sources_/include/configs/someboard.h:

    #ifndef CONFIG_SPL_BUILD
    #define CONFIG_API
    #define CONFIG_CMD_ELF
    #define CONFIG_SYS_MMC_MAX_DEVICE 1
    #endif

The conditional wrapper here ensures that the U-Boot API is only
enabled in U-Boot proper.  For many boards, there is an initial loader
(often called SPL or MLO) that is a trimmed-down version of U-Boot.
If this initial loader also publishes the U-Boot API, then things can
get very confused.

3. Customize CONFIG_BOOTCOMMAND

The U-Boot board configuration defines an initial bootscript
that usually needs to be changed around.  The adjusted bootscript
should generally:

* load uEnv.txt or similar to allow some end-user customization.
* load the DTB into memory at an appropriate address
* set the FDT address (this will be automatically passed to ubldr)
* load ubldr
* execute ubldr

================================================================

Building U-Boot in Crochet
--------------------------------

Crochet is designed so that tools such as U-Boot can be always built
directly from source.  (The existence of binary blobs in the Crochet
project itself is sometimes necessary, but we try to keep it to a
minimum.)  This requires that you test carefully and be aware of a few
issues:

* The board setup.sh should use uboot_test and provide an accurate set
  of instructions for downloading appropriate U-Boot source.  (Try the
  BeagleBone or RaspberryPi builds to see how this should work.)

* U-Boot is patched, configured, and built directly within the
  checkout directory.  During initial development, this can be a
  little painful when you end up with half-patched code or broken
  builds.  You may need to delete and re-checkout clean sources a few
  times before you get it right.

* The helper routines provided by Crochet's library check that
  the correct patches are applied and complain if not.

================================================================

About ubldr
--------------------------------

As of March 2013, ubldr is completely generic; it has no
board-specific code.  As such, it can be used as-is on
all boards that use U-Boot.

Almost.

Because ubldr is currently an ELF executable, it is linked to a
specific load address.  Since different boards have their initial
memory at different locations, ubldr must be linked separately for
boards with different initial memory layouts.

Also, this requires that U-Boot support ELF loading, as you may
have noticed above.

TODO: Try changing ubldr into a static PIC binary, which would address
both of these issues.

Ubldr will automatically read loader.rc from the UFS partition in the
/boot directory.  You should generally avoid relying on this as part
of your board definition; let end users customize their system this
way.  If you must put commands in loader.rc in order to properly boot
on a particular system, consider that a bug and talk to folks on
freebsd-arm mailing list to get ideas about how to improve it.

================================================================
